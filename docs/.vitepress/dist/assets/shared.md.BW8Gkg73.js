import{_ as o,c as a,a3 as n,o as t}from"./chunks/framework.DIwpdX6V.js";const h=JSON.parse('{"title":"Shared Components","description":"","frontmatter":{},"headers":[],"relativePath":"shared.md","filePath":"shared.md"}'),s={name:"shared.md"};function i(r,e,c,d,l,p){return t(),a("div",null,e[0]||(e[0]=[n('<h1 id="shared-components" tabindex="-1">Shared Components <a class="header-anchor" href="#shared-components" aria-label="Permalink to &quot;Shared Components&quot;">​</a></h1><p>With <strong>Svelte Standalone</strong>, you can simplify the process of creating new embeddables by sharing common components across your projects. For example, if you&#39;re building a Dashboard, you can reuse shared components (i.e. <code>Tabs</code> or <code>Tables</code>) across multiple Svelte components.</p><h2 id="how-to-share-components" tabindex="-1">How to Share Components <a class="header-anchor" href="#how-to-share-components" aria-label="Permalink to &quot;How to Share Components&quot;">​</a></h2><p>You can write plain Svelte components, stores, or utilities and import them into your <code>index.svelte</code> file, just as you would in any Svelte app.</p><p>To leverage CSS purging and reuse styles across your components, create a <code>/src/shared</code> folder. By placing your components in this folder, their styles will automatically be shared across all your Svelte embeddables, ensuring consistency and reducing redundancy.</p><p>This approach works great if you plan to use these components independently. For example, you could create a <code>Tooltip</code> component and reuse it across multiple embeddables in different apps. <a href="#creating-a-runtime-component">But what if you want to use both in the same app?</a></p><h2 id="runtime-components" tabindex="-1">Runtime Components <a class="header-anchor" href="#runtime-components" aria-label="Permalink to &quot;Runtime Components&quot;">​</a></h2><p><strong>Svelte Standalone</strong> supports a special component called <code>runtime</code> (you can also name it <code>$runtime</code> or <code>+runtime</code>).</p><p>A <code>runtime</code> component is designed to deduplicate styles from the <code>/src/shared</code> folder. For example, if you have a <code>Card</code> component, creating a <code>runtime</code> ensures that all your cards will include the CSS only once, reducing redundancy and improving performance.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><em>You can also use a <code>runtime</code> to run logic that will be reused across your app. For instance, you can handle authentication in your <code>runtime</code> and synchronize it across your other embeddables.</em></p><p><em>Additionally, you can pass props to your <code>runtime</code> to inject environment variables or configuration for your components. For example, by adding an <code>authUrl</code> prop to your runtime, you can manage authentication across multiple environments.</em></p></div><h2 id="create-a-runtime-component" tabindex="-1">Create a Runtime Component <a class="header-anchor" href="#create-a-runtime-component" aria-label="Permalink to &quot;Create a Runtime Component&quot;">​</a></h2><p>To create a <code>runtime</code> component, run the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> standalone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span></span></code></pre></div><p>When prompted for the component name, enter <code>runtime</code>, <code>$runtime</code>, or <code>+runtime</code>.</p><h2 id="ignore-runtime" tabindex="-1">Ignore Runtime <a class="header-anchor" href="#ignore-runtime" aria-label="Permalink to &quot;Ignore Runtime&quot;">​</a></h2><p>By default, styles from the <code>src/shared</code> folder are included across the runtime component during builds. If you want to bundle styles directly into each component instead, use the <code>--strip-runtime</code> flag:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> standalone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --strip-runtime</span></span></code></pre></div>',17)]))}const m=o(s,[["render",i]]);export{h as __pageData,m as default};
